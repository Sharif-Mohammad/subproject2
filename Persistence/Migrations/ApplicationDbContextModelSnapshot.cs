// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("framework")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", "framework");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("genres", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Movie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<string>("BoxOffice")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("box_office");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("boolean")
                        .HasColumnName("is_adult");

                    b.Property<string>("Plot")
                        .HasColumnType("text")
                        .HasColumnName("plot");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("poster_url");

                    b.Property<string>("Production")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("production");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.Property<int?>("RuntimeMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_minutes");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("MovieId");

                    b.ToTable("movies", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieCast", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<string>("PersonId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("person_id");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("character");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer")
                        .HasColumnName("ordering");

                    b.HasKey("MovieId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("movie_cast", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieCrew", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<string>("PersonId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("person_id");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MovieId", "PersonId", "Role");

                    b.HasIndex("PersonId");

                    b.ToTable("movie_crew", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieGenre", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("movie_genres", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieSource", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<string>("SourceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("source_url");

                    b.HasKey("MovieId", "SourceName");

                    b.ToTable("movie_sources", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Person", b =>
                {
                    b.Property<string>("PersonId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("person_id");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("integer")
                        .HasColumnName("birth_year");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("integer")
                        .HasColumnName("death_year");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("PersonId");

                    b.ToTable("people", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.PersonProfession", b =>
                {
                    b.Property<string>("PersonId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("person_id");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("integer")
                        .HasColumnName("profession_id");

                    b.HasKey("PersonId", "ProfessionId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("person_professions", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("profession_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfessionId"));

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("profession_name");

                    b.HasKey("ProfessionId");

                    b.ToTable("professions", "movie_data");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Rating", b =>
                {
                    b.Property<string>("MovieId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(5,1)")
                        .HasColumnName("averagerating");

                    b.Property<int>("NumVotes")
                        .HasColumnType("integer")
                        .HasColumnName("numvotes");

                    b.HasKey("MovieId");

                    b.ToTable("ratings", "movie_data");
                });

            modelBuilder.Entity("Domain.Framework.Bookmark", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1);

                    b.Property<string>("MovieId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("user_id");

                    b.ToTable("bookmarks", "framework", t =>
                        {
                            t.Property("user_id")
                                .HasColumnName("user_id1");
                        });
                });

            modelBuilder.Entity("Domain.Framework.NameRating", b =>
                {
                    b.Property<string>("PersonId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("person_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("TotalVotes")
                        .HasColumnType("bigint")
                        .HasColumnName("total_votes");

                    b.Property<decimal>("WeightedRating")
                        .HasColumnType("numeric")
                        .HasColumnName("weighted_rating");

                    b.HasKey("PersonId");

                    b.ToTable("name_ratings", "framework");
                });

            modelBuilder.Entity("Domain.Framework.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("note_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NoteId"));

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("actor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("NoteId");

                    b.HasIndex("user_id");

                    b.ToTable("notes", "framework", t =>
                        {
                            t.Property("user_id")
                                .HasColumnName("user_id1");
                        });
                });

            modelBuilder.Entity("Domain.Framework.SearchHistory", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1);

                    b.Property<string>("SearchQuery")
                        .HasColumnType("text")
                        .HasColumnName("search_query")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("SearchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("search_type");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "SearchQuery", "CreatedAt");

                    b.HasIndex("user_id");

                    b.ToTable("search_history", "framework", t =>
                        {
                            t.Property("user_id")
                                .HasColumnName("user_id1");
                        });
                });

            modelBuilder.Entity("Domain.Framework.UserRating", b =>
                {
                    b.Property<int>("RatingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ratings_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatingsId"));

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("movie_id");

                    b.Property<decimal>("RatingValue")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("RatingsId", "UserId");

                    b.HasIndex("user_id");

                    b.ToTable("user_ratings", "framework", t =>
                        {
                            t.Property("user_id")
                                .HasColumnName("user_id1");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "framework");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "framework");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "framework");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "framework");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "framework");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "framework");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieCast", b =>
                {
                    b.HasOne("Domain.Entities.Movies.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movies.Person", "Person")
                        .WithMany("CastMovies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieCrew", b =>
                {
                    b.HasOne("Domain.Entities.Movies.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movies.Person", "Person")
                        .WithMany("CrewMovies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieGenre", b =>
                {
                    b.HasOne("Domain.Entities.Movies.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movies.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Movies.MovieSource", b =>
                {
                    b.HasOne("Domain.Entities.Movies.Movie", "Movie")
                        .WithMany("Sources")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Movies.PersonProfession", b =>
                {
                    b.HasOne("Domain.Entities.Movies.Person", "Person")
                        .WithMany("Professions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movies.Profession", "Profession")
                        .WithMany("PersonProfessions")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Rating", b =>
                {
                    b.HasOne("Domain.Entities.Movies.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Framework.Bookmark", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Framework.Note", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("Notes")
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Framework.SearchHistory", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Framework.UserRating", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Auth.ApplicationUser", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Notes");

                    b.Navigation("Ratings");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Genres");

                    b.Navigation("Ratings");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Person", b =>
                {
                    b.Navigation("CastMovies");

                    b.Navigation("CrewMovies");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("Domain.Entities.Movies.Profession", b =>
                {
                    b.Navigation("PersonProfessions");
                });
#pragma warning restore 612, 618
        }
    }
}
